# O(n) time | O(n) space

class BinaryTree:
    def __init__(self, value):
        self.value = value
        self.left = None
        self.right = None

    def insert(self, values, i=0):
        if i >= len(values):
            return
        queue = [self]
        while len(queue) > 0:
            current = queue.pop(0)
            if current.left is None:
                current.left = BinaryTree(values[i])
                break
            queue.append(current.left)
            if current.right is None:
                current.right = BinaryTree(values[i])
                break
            queue.append(current.right)
        self.insert(values, i + 1)
        return self


def branchSums(root):
    sums = []
    runningSum = 0
    calculateBranchSum(root, sums, runningSum)
    return sums
    
def calculateBranchSum(root, sums, runningSum):
    if root is None: # if node has only one child
        return
    
    runningSum += root.value
    
    if root.left is None and root.right is None: # we are at leaf node
        sums.append(runningSum)
        return
    
    calculateBranchSum(root.left, sums, runningSum)
    calculateBranchSum(root.right, sums, runningSum)
    tree = BinaryTree(1).insert([2, 3, 4, 5, 6, 7, 8, 9, 10])
branchSums(tree)
