# O(h) time | O(1) space

"""
We have to just look up the tree or in the right subtree of current node

observation1: if a node has a right sub-tree, then the successor must be in the right sub-tree (farthest left in right sub-tree)
observation2: else, get the right most parent
"""
# This is an input class. Do not edit.
class BinaryTree:
    def __init__(self, value, left=None, right=None, parent=None):
        self.value = value
        self.left = left
        self.right = right
        self.parent = parent


def findSuccessor(tree, node):
    if node.right is not None:
        return getLeftMostChild(node.right)
    
    return getRightMostParent(node)

def getLeftMostChild(node):
    currentNode = node
    while currentNode.left is not None:
        currentNode = currentNode.left
    return currentNode
    
def getRightMostParent(node):
    currentNode = node
    while currentNode.parent is not None and currentNode.parent.right == currentNode: # checking the node came from right sub-tree
        currentNode = currentNode.parent
    return currentNode.parent
    root = BinaryTree(1)
root.left = BinaryTree(2)
root.left.parent = root
root.right = BinaryTree(3)
root.right.parent = root
root.left.left = BinaryTree(4)
root.left.left.parent = root.left
root.left.right = BinaryTree(5)
root.left.right.parent = root.left
root.left.left.left = BinaryTree(6)
root.left.left.left.parent = root.left.left
node = root.left.right
findSuccessor(root, node)
